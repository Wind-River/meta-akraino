diff --git a/defaults/main.yml b/defaults/main.yml
index 55ee346..8eac819 100644
--- a/defaults/main.yml
+++ b/defaults/main.yml
@@ -58,29 +58,30 @@ haproxy_bind_on_non_local: False
 
 ## haproxy SSL
 haproxy_ssl: true
-haproxy_ssl_dh_param: 2048
+haproxy_ssl_dh_param: 4096
 haproxy_ssl_self_signed_regen: no
 haproxy_ssl_cert: /etc/ssl/certs/haproxy.cert
 haproxy_ssl_key: /etc/ssl/private/haproxy.key
 haproxy_ssl_pem: /etc/ssl/private/haproxy.pem
 haproxy_ssl_ca_cert: /etc/ssl/certs/haproxy-ca.pem
 haproxy_ssl_self_signed_subject: "/C=US/ST=Texas/L=San Antonio/O=IT/CN={{ external_lb_vip_address }}/subjectAltName=IP.1={{ external_lb_vip_address }}"
-haproxy_ssl_cipher_suite: "{{ ssl_cipher_suite | default('ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS') }}"
-haproxy_ssl_bind_options: "no-sslv3"
-
+haproxy_ssl_cipher_suite: "{{ ssl_cipher_suite | default('DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DH-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:RSA+AESGCM:!LOW:!aNULL:!eNULL:!MD5:!DSS') }}"
+haproxy_ssl_bind_options: "no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets force-tlsv12"
+haproxy_ssl_server_ciphers: "{{ ssl_cipher_suite | default('DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DH-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:RSA+AESGCM:!LOW:!aNULL:!eNULL:!MD5:!DSS') }}"
+haproxy_ssl_server_options: "no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets force-tlsv12"
 haproxy_hatop_download_url: "https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/hatop/hatop-0.7.7.tar.gz"
 
 ## haproxy default
 # Set the number of retries to perform on a server after a connection failure
 haproxy_retries: "3"
 # Set the maximum inactivity time on the client side
-haproxy_client_timeout: "50s"
+haproxy_client_timeout: "90s"
 # Set the maximum time to wait for a connection attempt to a server to succeed
-haproxy_connect_timeout: "10s"
+haproxy_connect_timeout: "30s"
 # Set the maximum allowed time to wait for a complete HTTP request
-haproxy_http_request_timeout: "5s"
+haproxy_http_request_timeout: "30s"
 # Set the maximum inactivity time on the server side
-haproxy_server_timeout: "50s"
+haproxy_server_timeout: "90s"
 
 
 ## haproxy tuning params
diff --git a/handlers/main.yml b/handlers/main.yml
index 6634dc4..731bf2a 100644
--- a/handlers/main.yml
+++ b/handlers/main.yml
@@ -16,7 +16,7 @@
 - name: regen pem
   shell: >
     cat {{ haproxy_ssl_cert }} {{ haproxy_user_ssl_ca_cert is defined | ternary(haproxy_ssl_ca_cert,'') }} {{ haproxy_ssl_key }} > {{ haproxy_ssl_pem }}
-  notify: Restart haproxy
+  notify: Change file permissions
 
 - name: Regenerate haproxy configuration
   assemble:
@@ -26,6 +26,14 @@
   tags:
     - haproxy-general-config
 
+- name: Change file permissions
+  file:
+    path: "{{ haproxy_ssl_pem }}"
+    mode: '0440'
+    group: 'ironic'
+    owner: 'root'
+  notify: Restart haproxy
+
 - name: Restart haproxy
   service:
     name: "haproxy"
@@ -34,8 +42,5 @@
     daemon_reload: "{{ (ansible_service_mgr == 'systemd') | ternary('yes', omit) }}"
 
 - name: Restart rsyslog
-  service:
-    name: "rsyslog"
-    state: "restarted"
-    enabled: yes
-    daemon_reload: "{{ (ansible_service_mgr == 'systemd') | ternary('yes', omit) }}"
+  debug:
+    msg: "restarting of rsyslog omitted"
diff --git a/tasks/haproxy_post_install.yml b/tasks/haproxy_post_install.yml
index a755bd6..9e509e0 100644
--- a/tasks/haproxy_post_install.yml
+++ b/tasks/haproxy_post_install.yml
@@ -31,14 +31,6 @@
   tags:
     - haproxy-base-config
 
-- name: Drop haproxy logging config
-  copy:
-    src: "haproxy-logging.cfg"
-    dest: "/etc/rsyslog.d/99-haproxy-local-logging.conf"
-  notify: Restart rsyslog
-  tags:
-    - haproxy-logging-config
-
 - include: haproxy_service_config.yml
   tags:
     - haproxy-service-config
diff --git a/tasks/haproxy_ssl_key_distribute.yml b/tasks/haproxy_ssl_key_distribute.yml
index 3bbf8bd..6378fa3 100644
--- a/tasks/haproxy_ssl_key_distribute.yml
+++ b/tasks/haproxy_ssl_key_distribute.yml
@@ -17,7 +17,7 @@
   copy:
     dest: "{{ haproxy_ssl_key }}"
     content: "{{ hostvars[groups['haproxy_all'][0]]['haproxy_ssl_key_fact'] | b64decode }}"
-    mode: "0640"
+    mode: "0400"
   when: hostvars[groups['haproxy_all'][0]]['haproxy_ssl_key_fact'] is defined
   notify:
     - regen pem
@@ -28,7 +28,7 @@
   copy:
     dest: "{{ haproxy_ssl_cert }}"
     content: "{{ hostvars[groups['haproxy_all'][0]]['haproxy_ssl_cert_fact'] | b64decode }}"
-    mode: "0640"
+    mode: "0644"
   when: hostvars[groups['haproxy_all'][0]]['haproxy_ssl_cert_fact'] is defined
   notify:
     - regen pem
diff --git a/tasks/haproxy_ssl_self_signed.yml b/tasks/haproxy_ssl_self_signed.yml
index d602e7f..8de267e 100644
--- a/tasks/haproxy_ssl_self_signed.yml
+++ b/tasks/haproxy_ssl_self_signed.yml
@@ -20,4 +20,3 @@
   when: inventory_hostname == ansible_play_hosts[0]
 
 - include: haproxy_ssl_key_distribute.yml
-  when: inventory_hostname != ansible_play_hosts[0]
diff --git a/tasks/haproxy_ssl_user_provided.yml b/tasks/haproxy_ssl_user_provided.yml
index 656ae77..5bf9fe3 100644
--- a/tasks/haproxy_ssl_user_provided.yml
+++ b/tasks/haproxy_ssl_user_provided.yml
@@ -32,7 +32,7 @@
     dest: "{{ haproxy_ssl_key }}"
     owner: "root"
     group: "root"
-    mode: "0640"
+    mode: "0400"
   when: haproxy_user_ssl_key is defined
   notify:
     - regen pem
diff --git a/tasks/main.yml b/tasks/main.yml
index 31ee6d1..c628e70 100644
--- a/tasks/main.yml
+++ b/tasks/main.yml
@@ -29,7 +29,7 @@
 
 - include: haproxy_install.yml
   tags:
-    - haproxy_server-install
+    - haproxy_package-install
 
 - include: haproxy_ssl.yml
   when: haproxy_ssl | bool
diff --git a/templates/haproxy.cfg.j2 b/templates/haproxy.cfg.j2
index 1ffbf68..c57f2b5 100644
--- a/templates/haproxy.cfg.j2
+++ b/templates/haproxy.cfg.j2
@@ -19,10 +19,13 @@ global
         tune.ssl.lifetime {{ haproxy_tuning_params.ssl_lifetime | default('300') }}
 {% endif %}
         stats socket /var/run/haproxy.stat level admin mode 600
-        {% if haproxy_ssl | bool %}
+{% if haproxy_ssl | bool %}
         ssl-default-bind-options {{ haproxy_ssl_bind_options }}
+        ssl-default-bind-ciphers {{ haproxy_ssl_cipher_suite }}
+        ssl-default-server-options {{ haproxy_ssl_server_options }}
+        ssl-default-server-ciphers {{ haproxy_ssl_server_ciphers }}
         tune.ssl.default-dh-param {{haproxy_ssl_dh_param}}
-        {% endif %}
+{% endif %}
 
 defaults
         log global
@@ -37,7 +40,7 @@ defaults
 
 {% if haproxy_stats_enabled | bool %}
 listen stats
-    bind {{ haproxy_stats_bind_address }}:{{ haproxy_stats_port }} {% if haproxy_ssl | bool %}ssl crt {{ haproxy_ssl_pem }} ciphers {{ haproxy_ssl_cipher_suite }}{% endif %}
+    bind {{ haproxy_stats_bind_address }}:{{ haproxy_stats_port }} {% if haproxy_ssl | bool %}ssl crt {{ haproxy_ssl_pem }} {% endif %}
 
     mode http
     stats enable
diff --git a/templates/service.j2 b/templates/service.j2
index 243a635..10e40bb 100644
--- a/templates/service.j2
+++ b/templates/service.j2
@@ -32,14 +32,18 @@
 {% if (loop.index == 1 or item.service.haproxy_ssl_all_vips | default(false) | bool) %}
 
 frontend {{ item.service.haproxy_service_name }}-redirect-front-{{ loop.index }}
-bind {{ vip_bind }}:{{ item.service.haproxy_redirect_http_port }}
+    bind {{ vip_bind }}:{{ item.service.haproxy_redirect_http_port }}
     mode http
     redirect scheme https if !{ ssl_fc }
 {% endif %}
 {% endif %}
 
 frontend {{ item.service.haproxy_service_name }}-front-{{ loop.index }}
-    bind {{ vip_bind }}:{{ item.service.haproxy_port }} {% if (item.service.haproxy_ssl | default(false) | bool) and (loop.index == 1 or item.service.haproxy_ssl_all_vips | default(false) | bool) %}ssl crt {{ haproxy_ssl_pem }} ciphers {{ haproxy_ssl_cipher_suite }}{% endif %}
+{% if (item.service.haproxy_service_name == 'horizon') and (loop.index == 2) %}
+    bind {{ vip_bind }}:80
+{% else %}
+    bind {{ vip_bind }}:{{ item.service.haproxy_port }} {% if (item.service.haproxy_ssl | default(false) | bool) and (loop.index == 1 or item.service.haproxy_ssl_all_vips | default(false) | bool) %}ssl crt {{ haproxy_ssl_pem }}{% endif %}
+{% endif %}
 
 {% if request_option == "http" %}
     option httplog
@@ -65,6 +69,8 @@ frontend {{ item.service.haproxy_service_name }}-front-{{ loop.index }}
 {% if (item.service.haproxy_ssl | default(false) | bool) and request_option == 'http' and (loop.index == 1 or item.service.haproxy_ssl_all_vips | default(false) | bool) %}
     reqadd X-Forwarded-Proto:\ https
 {% endif %}
+    rspadd X-Frame-Options:\ SAMEORIGIN
+    rspadd Strict-Transport-Security:\ max-age=15768000
     mode {{ item.service.haproxy_balance_type }}
     default_backend {{ item.service.haproxy_service_name }}-back
 {% endfor %}
diff --git a/tox.ini b/tox.ini
deleted file mode 100644
index 0f812ef..0000000
--- a/tox.ini
+++ /dev/null
@@ -1,114 +0,0 @@
-[tox]
-minversion = 2.0
-skipsdist = True
-envlist = docs,linters,functional
-
-
-[testenv]
-usedevelop = True
-install_command =
-    pip install -c{env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt?h=stable/queens} {opts} {packages}
-deps =
-    -r{toxinidir}/test-requirements.txt
-commands =
-    /usr/bin/find . -type f -name "*.pyc" -delete
-passenv =
-    HOME
-    http_proxy
-    HTTP_PROXY
-    https_proxy
-    HTTPS_PROXY
-    no_proxy
-    NO_PROXY
-whitelist_externals =
-    bash
-setenv =
-    PYTHONUNBUFFERED=1
-    ROLE_NAME=haproxy_server
-    TEST_IDEMPOTENCE=true
-    VIRTUAL_ENV={envdir}
-    WORKING_DIR={toxinidir}
-
-
-[testenv:docs]
-commands=
-    bash -c "rm -rf doc/build"
-    doc8 doc
-    python setup.py build_sphinx
-
-
-[doc8]
-# Settings for doc8:
-extensions = .rst
-
-
-[testenv:releasenotes]
-commands =
-    sphinx-build -a -E -W -d releasenotes/build/doctrees -b html releasenotes/source releasenotes/build/html
-
-
-# environment used by the -infra templated docs job
-[testenv:venv]
-commands =
-    {posargs}
-
-
-[testenv:pep8]
-commands =
-    bash -c "{toxinidir}/tests/tests-repo-clone.sh"
-    bash -c "{toxinidir}/tests/common/test-pep8.sh"
-
-
-[flake8]
-# Ignores the following rules due to how ansible modules work in general
-#     F403 'from ansible.module_utils.basic import *' used;
-#          unable to detect undefined names
-ignore=F403
-
-
-[testenv:bashate]
-commands =
-    bash -c "{toxinidir}/tests/tests-repo-clone.sh"
-    bash -c "{toxinidir}/tests/common/test-bashate.sh"
-
-
-[testenv:ansible]
-deps =
-    {[testenv]deps}
-    -rhttps://git.openstack.org/cgit/openstack/openstack-ansible/plain/global-requirement-pins.txt?h=stable/queens
-    -rhttps://git.openstack.org/cgit/openstack/openstack-ansible-tests/plain/test-ansible-deps.txt?h=stable/queens
-
-
-[testenv:ansible-syntax]
-deps =
-    {[testenv:ansible]deps}
-commands =
-    bash -c "{toxinidir}/tests/tests-repo-clone.sh"
-    bash -c "{toxinidir}/tests/common/test-ansible-syntax.sh"
-
-
-[testenv:ansible-lint]
-deps =
-    {[testenv:ansible]deps}
-commands =
-    bash -c "{toxinidir}/tests/tests-repo-clone.sh"
-    bash -c "{toxinidir}/tests/common/test-ansible-lint.sh"
-
-
-[testenv:functional]
-deps =
-    {[testenv:ansible]deps}
-commands =
-    bash -c "{toxinidir}/tests/tests-repo-clone.sh"
-    bash -c "{toxinidir}/tests/common/test-ansible-functional.sh"
-
-
-[testenv:linters]
-deps =
-    {[testenv:ansible]deps}
-commands =
-    {[testenv:pep8]commands}
-    {[testenv:bashate]commands}
-    {[testenv:ansible-lint]commands}
-    {[testenv:ansible-syntax]commands}
-    {[testenv:docs]commands}
