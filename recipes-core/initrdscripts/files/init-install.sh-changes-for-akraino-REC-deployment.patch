From 41c057ec156bad84ae8fcaf139c8a4930a995204 Mon Sep 17 00:00:00 2001
From: Jackie Huang <jackie.huang@windriver.com>
Date: Thu, 13 Feb 2020 16:49:33 +0800
Subject: [PATCH] install.sh: changes for akraino REC deployment

Signed-off-by: Jackie Huang <jackie.huang@windriver.com>
---
 install.sh | 82 +++++++++++++++++++++++++++++++++-----------------------------
 1 file changed, 44 insertions(+), 38 deletions(-)

diff --git a/install.sh b/install.sh
index 0152d9b..ddb1440 100644
--- a/install.sh
+++ b/install.sh
@@ -58,6 +58,9 @@ for device in $devices; do
         ram*)
             # skip ram device
             ;;
+        nbd*)
+            # skip nbd device
+	    ;;
         *)
             # skip the device LiveOS is on
             # Add valid hard drive name to the list
@@ -93,29 +96,16 @@ for hdname in $hdnamelist; do
     echo
 done
 
-# Get user choice
-while true; do
-    echo "Please select an install target or press n to exit ($hdnamelist ): "
-    read answer
-    if [ "$answer" = "n" ]; then
-        echo "Installation manually aborted."
-        exit 1
-    fi
-    for hdname in $hdnamelist; do
-        if [ "$answer" = "$hdname" ]; then
-            TARGET_DEVICE_NAME=$answer
-            break
-        fi
-    done
-    if [ -n "$TARGET_DEVICE_NAME" ]; then
-        break
-    fi
+# use the first one found
+for hdname in $hdnamelist; do
+    TARGET_DEVICE_NAME=$hdname
+    break
 done
 
 if [ -n "$TARGET_DEVICE_NAME" ]; then
     echo "Installing image on /dev/$TARGET_DEVICE_NAME ..."
 else
-    echo "No hard drive selected. Installation aborted."
+    echo "No hard drive found. Installation aborted."
     exit 1
 fi
 
@@ -157,13 +147,16 @@ else
     bios_boot_size=2
 fi
 
-swap_size=$((disk_size*swap_ratio/100))
-rootfs_size=$((disk_size-bios_boot_size-boot_size-swap_size))
+#swap_size=$((disk_size*swap_ratio/100))
+#rootfs_size=$((disk_size-bios_boot_size-boot_size-swap_size))
+#swap_start=$((rootfs_end))
 
+rootfs_size="51200"
+data_size=$((disk_size-bios_boot_size-boot_size-rootfs_size))
 boot_start=$((bios_boot_size))
 rootfs_start=$((bios_boot_size+boot_size))
 rootfs_end=$((rootfs_start+rootfs_size))
-swap_start=$((rootfs_end))
+data_start=$((rootfs_end))
 
 # MMC devices are special in a couple of ways
 # 1) they use a partition prefix character 'p'
@@ -185,19 +178,22 @@ if [ $grub_version -eq 0 ] ; then
     bios_boot=''
     bootfs=${device}${part_prefix}1
     rootfs=${device}${part_prefix}2
-    swap=${device}${part_prefix}3
+    #swap=${device}${part_prefix}3
+    data=${device}${part_prefix}3
 else
     bios_boot=${device}${part_prefix}1
     bootfs=${device}${part_prefix}2
     rootfs=${device}${part_prefix}3
-    swap=${device}${part_prefix}4
+    #swap=${device}${part_prefix}4
+    data=${device}${part_prefix}4
 fi
 
 echo "*****************"
 [ $grub_version -ne 0 ] && echo "BIOS boot partition size: $bios_boot_size MB ($bios_boot)"
 echo "Boot partition size:   $boot_size MB ($bootfs)"
 echo "Rootfs partition size: $rootfs_size MB ($rootfs)"
-echo "Swap partition size:   $swap_size MB ($swap)"
+#echo "Swap partition size:   $swap_size MB ($swap)"
+echo "Data partition size:   $data_size MB ($data)"
 echo "*****************"
 echo "Deleting partition table on ${device} ..."
 dd if=/dev/zero of=${device} bs=512 count=35
@@ -218,17 +214,21 @@ fi
 
 echo "Creating rootfs partition on $rootfs"
 [ $grub_version -eq 0 ] && pname='primary' || pname='root'
-parted ${device} mkpart $pname ext4 $rootfs_start $rootfs_end
+parted ${device} -s mkpart $pname xfs $rootfs_start $rootfs_end
+
+#echo "Creating swap partition on $swap"
+#[ $grub_version -eq 0 ] && pname='primary' || pname='swap'
+#parted ${device} mkpart $pname linux-swap $swap_start 100%
 
-echo "Creating swap partition on $swap"
-[ $grub_version -eq 0 ] && pname='primary' || pname='swap'
-parted ${device} mkpart $pname linux-swap $swap_start 100%
+echo "Creating data partition on $data"
+[ $grub_version -eq 0 ] && pname='primary' || pname='data'
+parted ${device} -s mkpart $pname xfs $data_start 100%
 
 parted ${device} print
 
 echo "Waiting for device nodes..."
 C=0
-while [ $C -ne 3 ] && [ ! -e $bootfs  -o ! -e $rootfs -o ! -e $swap ]; do
+while [ $C -ne 3 ] && [ ! -e $bootfs  -o ! -e $rootfs -o ! -e $data ]; do
     C=$(( C + 1 ))
     sleep 1
 done
@@ -236,11 +236,11 @@ done
 echo "Formatting $bootfs to ext3..."
 mkfs.ext3 $bootfs
 
-echo "Formatting $rootfs to ext4..."
-mkfs.ext4 $rootfs
+echo "Formatting $rootfs to xfs..."
+mkfs.xfs -f $rootfs
 
-echo "Formatting swap partition...($swap)"
-mkswap $swap
+#echo "Formatting swap partition...($swap)"
+#mkswap $swap
 
 mkdir /tgt_root
 mkdir /src_root
@@ -253,21 +253,26 @@ if [ ! -f /run/media/$1/$2 ]; then
     mkdir -p /run/media/$1
     mount /dev/$1 /run/media/$1
 fi
-mount -o rw,loop,noatime,nodiratime /run/media/$1/$2 /src_root
+
+#mount -o rw,loop,noatime,nodiratime /run/media/$1/$2 /src_root
+qemu-nbd -c /dev/nbd0 -r /run/media/$1/$2
+parted /dev/nbd0 print
+mount /dev/nbd0p2 /src_root
 
 echo "Copying rootfs files..."
 cp -a /src_root/* /tgt_root
 if [ -d /tgt_root/etc/ ] ; then
     if [ $grub_version -ne 0 ] ; then
         boot_uuid=$(blkid -o value -s UUID ${bootfs})
-        swap_part_uuid=$(blkid -o value -s PARTUUID ${swap})
         bootdev="UUID=$boot_uuid"
-        swapdev=/dev/disk/by-partuuid/$swap_part_uuid
+        #swap_part_uuid=$(blkid -o value -s PARTUUID ${swap})
+        #swapdev=/dev/disk/by-partuuid/$swap_part_uuid
     else
         bootdev=${bootfs}
         swapdev=${swap}
     fi
-    echo "$swapdev                swap             swap       defaults              0  0" >> /tgt_root/etc/fstab
+    sed -i '/vfat/d' /tgt_root/etc/fstab
+    #echo "$swapdev                swap             swap       defaults              0  0" >> /tgt_root/etc/fstab
     echo "$bootdev              /boot            ext3       defaults              1  2" >> /tgt_root/etc/fstab
     # We dont want udev to mount our root device while we're booting...
     if [ -d /tgt_root/etc/udev/ ] ; then
@@ -282,6 +287,7 @@ cp -f /run/media/$1/$2 $IMAGE_DIR/guest-image.img
 
 umount /tgt_root
 umount /src_root
+qemu-nbd -d /dev/nbd0
 
 echo "Looking for kernels to use as boot target.."
 # Find kernel to boot to
@@ -322,7 +328,7 @@ timeout=5
 default=0
 menuentry "Linux" {
     search --no-floppy --fs-uuid $boot_uuid --set root
-    linux /$kernel root=PARTUUID=$root_part_uuid $rootwait rw $5 $3 $4 quiet
+    linux /$kernel root=PARTUUID=$root_part_uuid $rootwait rw console=tty0 console=ttyS0,115200 $5 $3 $4
 }
 _EOF
     chmod 0444 $GRUBCFG
-- 
2.7.4

